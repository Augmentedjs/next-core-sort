{"version":3,"sources":["webpack://next-core-sort/webpack/universalModuleDefinition","webpack://next-core-sort/webpack/bootstrap","webpack://next-core-sort/./src/index.js","webpack://next-core-sort/./src/sort.js"],"names":["root","factory","exports","module","define","amd","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","_sort","sortObjects","mergeSort","quickSort","insertionSort","bubbleSort","array","descending","sort","a","b","x","y","arr","middle","Math","left","right","_merge","result","indexLeft","indexRight","length","pivot","unsortedList","sortedList","len","j","tmp","sorted","swapped"],"mappings":"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","file":"next-core-sort.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"next-core-sort\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"next-core-sort\"] = factory();\n\telse\n\t\troot[\"next-core-sort\"] = factory();\n})(this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/dist/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","import { sortObjects, mergeSort, quickSort, insertionSort, bubbleSort } from \"./sort.js\";\n\nmodule.exports.sortObjects = sortObjects;\nmodule.exports.mergeSort = mergeSort;\nmodule.exports.quickSort = quickSort;\nmodule.exports.insertionSort = insertionSort;\nmodule.exports.bubbleSort = bubbleSort;\n","/**\n * Sorts an array of objects by propery in object (not a deep property)\n * @function sortObjects\n * @param {array} array The object array to sort\n * @param {object} key The property to sort by\n * @param {boolean} descending Reverse the order\n * @returns {array} The sorted array\n */\nexport const sortObjects = (array, key, descending) => {\n  return array.sort( (a, b) => {\n    const x = a[key], y = b[key];\n    if (descending) {\n      return ((x < y) ? 1 : ((x > y) ? -1 : 0));\n    }\n    return ((x < y) ? -1 : ((x > y) ? 1 : 0));\n  });\n};\n\n/**\n * Split the array into halves and merge them recursively\n * @function mergeSort\n * @param {array} array The array to sort\n * @returns {array} The sorted array\n */\nexport const mergeSort = (arr) => {\n  if (arr.length === 1) {\n    // return once we hit an array with a single item\n    return arr;\n  }\n\n  const middle = Math.floor(arr.length / 2); // get the middle item of the array rounded down\n  const left = arr.slice(0, middle); // items on the left side\n  const right = arr.slice(middle); // items on the right side\n\n  return _merge(mergeSort(left), mergeSort(right));\n};\n\n/*\n * compare the arrays item by item and return the concatenated result\n */\nconst _merge = (left, right) => {\n  let result = [];\n  let indexLeft = 0;\n  let indexRight = 0;\n\n  while (indexLeft < left.length && indexRight < right.length) {\n    if (left[indexLeft] < right[indexRight]) {\n      result.push(left[indexLeft]);\n      indexLeft++;\n    } else {\n      result.push(right[indexRight]);\n      indexRight++;\n    }\n  }\n  return result.concat(left.slice(indexLeft)).concat(right.slice(indexRight));\n};\n\n/**\n * Quick Sort implimentation for Arrays -\n * @function QuickSort\n * @param {Array} arr Array to Sort\n * @returns {Array} Returns a sorted array\n */\nexport const quickSort = (arr) => {\n  //if array is empty\n  if (arr.length === 0) {\n    return [];\n  }\n\n  let i = 1;\n  const l = arr.length, left = [], right = [], pivot = arr[0];\n  //go through each element in array\n  for (i = 1; i < l; i++) {\n    if (arr[i] < pivot) {\n      left.push(arr[i]);\n    } else {\n      right.push(arr[i]);\n    }\n  }\n  return quickSort(left).concat(pivot, quickSort(right));\n};\n\n/**\n * Insertion sort is a simple sorting algorithm that builds the final sorted array (or list) one item at a time.\n * It is much less efficient on large lists than more advanced algorithms such as quicksort, heapsort, or merge sort.\n * @function mergeSort\n * @param {array} array The array to sort\n * @returns {array} The sorted array\n */\nexport const insertionSort = (unsortedList) => {\n  let sortedList = [];\n  if (unsortedList) {\n    sortedList = unsortedList.slice();\n    const len = sortedList.length;\n    let i, j, tmp;\n  \tfor (i = 1; i < len; i++) {\n  \t\ttmp = sortedList[i]; //Copy of the current element.\n  \t\t/*Check through the sorted part and compare with the number in tmp. If large, shift the number*/\n  \t\tfor (j = i - 1; j >= 0 && (sortedList[j] > tmp); j--) {\n  \t\t\t//Shift the number\n  \t\t\tsortedList[j + 1] = sortedList[j];\n  \t\t}\n  \t\t//Insert the copied number at the correct position\n  \t\t//in sorted part.\n  \t\tsortedList[j + 1] = tmp;\n  \t}\n  }\n\treturn sortedList;\n};\n\n/**\n * Simple sorting algorithm that repeatedly steps through the list to be sorted, compares each pair of adjacent items and swaps them if they are in the wrong order.\n * @function mergeSort\n * @param {array} array The array to sort\n * @returns {array} The sorted array\n */\nexport const bubbleSort = (a) => {\n  let sorted = [];\n  if (a) {\n    sorted = a.slice();\n    let swapped, i, tmp;\n    const l = sorted.length - 1;\n    do {\n      swapped = false;\n      for (i = 0; i < l; i++) {\n        if (sorted[i] > sorted[i + 1]) {\n          tmp = sorted[i];\n          sorted[i] = sorted[i + 1];\n          sorted[i + 1] = tmp;\n          swapped = true;\n        }\n      }\n    } while (swapped);\n  }\n  return sorted;\n};\n"],"sourceRoot":""}